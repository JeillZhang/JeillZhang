{"posts":[{"title":"Docker 镜像操作","text":"什么是镜像镜像操作命令docker image search","link":"/2024/03/container/docker-images-oprator/"},{"title":"Docker 容器操作","text":"","link":"/2024/03/container/docker-container-oprator/"},{"title":"Docker 安装及配置","text":"Docker1 安装1.1 debain 使用脚本自动安装 12curl -fsSL get.docker.com -o get-docker.shsudo sh get-docker.sh --mirror Aliyun 手动安装 更新软件包索引，并且安装必要的依赖软件，来添加一个新的 HTTPS 软件源 12sudo apt updatesudo apt install apt-transport-https ca-certificates curl gnupg-agent software-properties-common 使用下面的 curl 导入源仓库的 GPG key： 12345# 官方：curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -# Aliyuncurl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add - 安装 Docker 最新版本 12sudo apt updatesudo apt install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin 启动Docker 12sudo systemctl enable dockersudo systemctl start docker 建立 docker 用户组 默认情况下，docker 命令会使用 Unix socket 与 Docker 引擎通讯。而只有 root 用户和 docker 组的用户才可以访问 Docker 引擎的 Unix socket。出于安全考虑，一般 Linux 系统上不会直接使用 root 用户。因此，更好地做法是将需要使用 docker 的用户加入 docker 用户组。 123456# 建立 docker 组：sudo groupadd docker# 将当前用户加入 docker 组：sudo usermod -aG docker $USER# 退出当前终端并重新登录 docker 镜像 1234567891011121314151617181920网易：http://hub-mirror.c.163.com中科大镜像地址：http://mirrors.ustc.edu.cn/中科大github地址：https://github.com/ustclug/mirrorrequestAzure中国镜像地址：http://mirror.azure.cn/Azure中国github地址：https://github.com/Azure/container-service-for-azure-chinaDockerHub镜像仓库: https://hub.docker.com/ 阿里云镜像仓库： https://cr.console.aliyun.com google镜像仓库： https://console.cloud.google.com/gcr/images/google-containers/GLOBAL （如果你本地可以翻墙的话是可以连上去的 ）coreos镜像仓库： https://quay.io/repository/ RedHat镜像仓库： https://access.redhat.com/containers配置：sudo mkdir -p /etc/dockersudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'{ &quot;registry-mirrors&quot;: [&quot;https://cr.console.aliyun.com&quot;]}EOFsudo systemctl daemon-reloadsudo systemctl restart docker 1.2 Centos 使用脚本自动安装 12curl -fsSL get.docker.com -o get-docker.shsudo sh get-docker.sh --mirror Aliyun 手动安装 安装依赖 1sudo yum install -y yum-utils # openEuler 自带 dnf 管理器，可直接管理 yum 源 配置docker仓库 12345官方：sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repoAliyun:sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo 下载安装 12sudo yum makecache fast # 更新索引sudo yum install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin （openEuler）更新索引时，可能会报错404，可按如下方法解决 1234567cd /etc/yum.repos.d/# ls -lhrt # -rw-r--r--. 1 root root 2.7K Dec 9 20:33 openEuler.repo.bak# -rw-r--r--. 1 root root 3.0K Dec 9 20:37 openEuler.repo# -rw-r--r--. 1 root root 2.0K Feb 3 16:45 docker-ce.repo编辑 docker-ce.repo，将 $releasever 替换为 8，即CentOS8，使得能够在阿里云的centos仓库中找到对应的工具","link":"/2024/02/container/docker-install/"},{"title":"Docker 仓库配置及使用","text":"","link":"/2024/03/container/docker-repo-oprator/"},{"title":"React 事件响应及单组件状态处理","text":"事件响应事件处理函数 使用 React 可以在 JSX 中添加 事件处理函数。其中事件处理函数为自定义函数，它将在响应交互（如点击、悬停、表单输入框获得焦点等）时触发。React 官方文档 – 响应事件 大多元素均可绑定响应的事件，以按钮为例，最常使用的事件为点击事件。在 Ract 中为一个按钮添加点击事件非常简单，只需要在组件内创建一个事件处理函数，并在标签返回时，将其绑定到 onClick 属性上即可： 为按钮绑定点击事件12345678910111213function App() { function handleButtonClick() { alert(&quot;Button clicked.&quot;); } return ( &lt;button onClick={handleButtonClick}&gt; Click me &lt;/button&gt; );}export default App; 事件处理函数通常有如下特点： 通常在 组件内部 定义。（这样做的好处是可以直接访问组件内部的 props 。） 名称以 handle 开头，后跟事件名称。（这只是一种惯例，并非强制。） 一种更为简洁的方式为使用 Javascript 的箭头函数，为一个元素内联绑定事件处理函数，这种方式当处理函数比较小的情况下是非常方便的： 内联函数绑定事件处理1234567891011function App() { return ( &lt;button onClick={()=&gt;{ alert(&quot;Button clicked.&quot;); }}&gt; Click me &lt;/button&gt; );}export default App; 通过 props 传递事件处理函数","link":"/2024/03/framworks/front_framworks/react/event-response-and-single-comp-state/"}],"tags":[{"name":"容器化","slug":"容器化","link":"/tags/%E5%AE%B9%E5%99%A8%E5%8C%96/"},{"name":"Docker","slug":"Docker","link":"/tags/Docker/"},{"name":"笔记","slug":"笔记","link":"/tags/%E7%AC%94%E8%AE%B0/"},{"name":"React","slug":"React","link":"/tags/React/"},{"name":"前端","slug":"前端","link":"/tags/%E5%89%8D%E7%AB%AF/"},{"name":"框架","slug":"框架","link":"/tags/%E6%A1%86%E6%9E%B6/"},{"name":"前端框架","slug":"前端框架","link":"/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"}],"categories":[{"name":"容器化","slug":"容器化","link":"/categories/%E5%AE%B9%E5%99%A8%E5%8C%96/"},{"name":"Docker","slug":"容器化/Docker","link":"/categories/%E5%AE%B9%E5%99%A8%E5%8C%96/Docker/"},{"name":"框架","slug":"框架","link":"/categories/%E6%A1%86%E6%9E%B6/"},{"name":"前端框架","slug":"框架/前端框架","link":"/categories/%E6%A1%86%E6%9E%B6/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"},{"name":"React","slug":"框架/前端框架/React","link":"/categories/%E6%A1%86%E6%9E%B6/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/"}],"pages":[]}